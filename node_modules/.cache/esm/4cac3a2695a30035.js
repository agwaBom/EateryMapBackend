let passport,FacebookStrategy,GoogleStrategy,User,facebook,google;_95a‍.x([["facebookLogin",()=>facebookLogin],["facebookMiddleware",()=>facebookMiddleware],["googleLogin",()=>googleLogin],["googleMiddleware",()=>googleMiddleware],["oauthCallback",()=>oauthCallback]]);_95a‍.w("passport",[["default",["passport"],function(v){passport=v}]]);_95a‍.w("passport-facebook",[["default",["FacebookStrategy"],function(v){FacebookStrategy=v}]]);_95a‍.w("passport-google-oauth20",[["default",["GoogleStrategy"],function(v){GoogleStrategy=v}]]);_95a‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_95a‍.w(".../config",[["facebook",["facebook"],function(v){facebook=v}],["google",["google"],function(v){google=v}]]);



// Import Facebook and Google OAuth apps configs


// Transform Facebook profile because Facebook and Google profile objects look different
// and we want to transform them into user objects that have the same set of attributes
const transformFacebookProfile = (profile) => ({
  oauth_id: profile.id,
  name: profile.name,
  avatar: profile.picture.data.url,
});

// Transform Google profile into user object
const transformGoogleProfile = (profile) => ({
  oauth_id: profile.id,
  name: profile.displayName,
  avatar: profile.image.url,
});

// Register Facebook Passport strategy
passport.use(new FacebookStrategy(facebook,
  // Gets called when user authorizes access to their profile
  async (accessToken, refreshToken, profile, done) =>
     done(null, await createOrGetUserFromDatabase(transformFacebookProfile(profile._json)))
));

// Register Google Passport strategy
passport.use(new GoogleStrategy(google,
  async (accessToken, refreshToken, profile, done) =>
     done(null, await createOrGetUserFromDatabase(transformGoogleProfile(profile._json)))
));

const createOrGetUserFromDatabase = async (userProfile) => {
  let user = await User.findOne({ 'oauth_id': userProfile.oauth_id }).exec();
  if (!user) {
    user = new User({
      oauth_id: userProfile.oauth_id,
      name: userProfile.name,
      avatar: userProfile.avatar,
    });
    await user.save();
  }
  return user;
};

// Serialize user into the sessions
passport.serializeUser((user, done) => done(null, user));

// Deserialize user from the sessions
passport.deserializeUser((user, done) => done(null, user));

// Facebook
       const facebookLogin = passport.authenticate('facebook');
       const facebookMiddleware = passport.authenticate('facebook', { failureRedirect: '/auth/facebook' });

// Google
       const googleLogin = passport.authenticate('google', { scope: ['profile'] });
       const googleMiddleware = passport.authenticate('google', { failureRedirect: '/auth/google' });

// Callback
       const oauthCallback = async (req, res) => {
  res.redirect('OAuthLogin://login?user=' + JSON.stringify(req.user));
};